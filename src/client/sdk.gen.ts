// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListAllFormsOfMetadataData, ListAllFormsOfMetadataResponse, DescriptorData, DescriptorResponse, GetCollectionResourceTodoGetData, GetCollectionResourceTodoGetResponse, PostCollectionResourceTodoPostData, PostCollectionResourceTodoPostResponse, DeleteItemResourceTodoDeleteData, DeleteItemResourceTodoDeleteResponse, GetItemResourceTodoGetData, GetItemResourceTodoGetResponse, PatchItemResourceTodoPatchData, PatchItemResourceTodoPatchResponse, PutItemResourceTodoPutData, PutItemResourceTodoPutResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const listAllFormsOfMetadata = <ThrowOnError extends boolean = false>(options?: Options<ListAllFormsOfMetadataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllFormsOfMetadataResponse, unknown, ThrowOnError>({
        url: '/profile',
        ...options
    });
};

export const descriptor = <ThrowOnError extends boolean = false>(options?: Options<DescriptorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DescriptorResponse, unknown, ThrowOnError>({
        url: '/profile/todos',
        ...options
    });
};

/**
 * get-todo
 */
export const getCollectionResourceTodoGet = <ThrowOnError extends boolean = false>(options?: Options<GetCollectionResourceTodoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCollectionResourceTodoGetResponse, unknown, ThrowOnError>({
        url: '/todos',
        ...options
    });
};

/**
 * create-todo
 */
export const postCollectionResourceTodoPost = <ThrowOnError extends boolean = false>(options: Options<PostCollectionResourceTodoPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCollectionResourceTodoPostResponse, unknown, ThrowOnError>({
        url: '/todos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete-todo
 */
export const deleteItemResourceTodoDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteItemResourceTodoDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemResourceTodoDeleteResponse, unknown, ThrowOnError>({
        url: '/todos/{id}',
        ...options
    });
};

/**
 * get-todo
 */
export const getItemResourceTodoGet = <ThrowOnError extends boolean = false>(options: Options<GetItemResourceTodoGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemResourceTodoGetResponse, unknown, ThrowOnError>({
        url: '/todos/{id}',
        ...options
    });
};

/**
 * patch-todo
 */
export const patchItemResourceTodoPatch = <ThrowOnError extends boolean = false>(options: Options<PatchItemResourceTodoPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchItemResourceTodoPatchResponse, unknown, ThrowOnError>({
        url: '/todos/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * update-todo
 */
export const putItemResourceTodoPut = <ThrowOnError extends boolean = false>(options: Options<PutItemResourceTodoPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutItemResourceTodoPutResponse, unknown, ThrowOnError>({
        url: '/todos/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};